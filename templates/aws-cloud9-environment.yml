---
AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Creates a vpc and cloud9 environment for development use
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Environment Configuration"
        Parameters:
        - CostCenter
        - Prefix
        - Owner
      - Label:
          default: "Network Configuration"
        Parameters:
        - VpcCidr
    ParameterLabels:
      VpcCidr:
        default: "VPC cidr block"
  Version:
    Description: 1.2
Parameters:
  CostCenter:
    Type: String
    MinLength: 5
    MaxLength: 7
    Description: "CostCenter - must be lower-case, limit 4 characters"
    AllowedPattern: "\\d{5,7}"
  Prefix:
    Type: String
    Description: tag prefix to help sort things out in the console
    Default: "Cloud9"
  Owner:
    Type: String
    Description: "email address of the the Owner of this stack"
    AllowedPattern: "^[\\w-\\+]+(\\.[\\w]+)*@[\\w-]+(\\.[\\w]+)*(\\.[a-z]{2,})$"
  VpcCidr:
    Type: String
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid CIDR range in the form x.x.x.x/x
    Default: 10.255.252.0/22
Resources:
  Vpc:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: true
      Tags:
        - Key: "Name"
          Value: !Join ["-", [!Ref Prefix, "vpc"]]
        - Key: "CostCenter"
          Value: !Ref CostCenter
        - Key: "Owner"
          Value: !Ref Owner
  VpcDefaultSecurityGroupIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !GetAtt [Vpc, DefaultSecurityGroup]
      IpProtocol: "6"
      ToPort: 443
      FromPort: 443
      CidrIp: !GetAtt Vpc.CidrBlock
      Description: Allow only vpc communication
  VpcDefaultSecurityGroupEgress:
    Type: "AWS::EC2::SecurityGroupEgress"
    Properties:
      GroupId: !GetAtt [Vpc, DefaultSecurityGroup]
      IpProtocol: "6"
      ToPort: 443
      FromPort: 443
      CidrIp: !GetAtt Vpc.CidrBlock
      Description: Allow only vpc endpoint communication
  Igw:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref Prefix, "igw"]]
        - Key: CostCenter
          Value: !Ref CostCenter
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref Igw
## end vpc resource definition
## begin route table definitions
  PublicSubnetsRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: "Name"
          Value: !Join ["-", [!Ref Prefix, "public-sub-rt"]]
        - Key: "CostCenter"
          Value: !Ref CostCenter
        - Key: "Owner"
          Value: !Ref Owner
## end route table definitions
## begin route definitions
  PublicSubnetsRouteDefault:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref Igw
      RouteTableId: !Ref PublicSubnetsRouteTable
## end route definitions
## begin public subnet definitions
  PublicSubnetA: # Public Subnet in AZ - 0
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ]
      CidrBlock: !Select [0, !Cidr [ !GetAtt Vpc.CidrBlock, 4, 8]]
      MapPublicIpOnLaunch: true
      VpcId: !Ref Vpc
      Tags:
        - Key: "Name"
          Value: !Join ["-", [!Ref Prefix, "public-a-sub"]]
        - Key: "CostCenter"
          Value: !Ref CostCenter
        - Key: "Owner"
          Value: !Ref Owner

  PublicSubnetARouteTableAssociation: 
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PublicSubnetsRouteTable
      SubnetId: !Ref PublicSubnetA 

  PublicSubnetB: # Public Subnet in AZ - 1
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [1, !GetAZs ]
      CidrBlock: !Select [1, !Cidr [ !GetAtt Vpc.CidrBlock, 4, 8]]
      MapPublicIpOnLaunch: true
      VpcId: !Ref Vpc
      Tags:
        - Key: "Name"
          Value: !Join ["-", [!Ref Prefix, "public-b-sub"]]
        - Key: "CostCenter"
          Value: !Ref CostCenter
        - Key: "Owner"
          Value: !Ref Owner

  PublicSubnetBRouteTableAssociation: 
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PublicSubnetsRouteTable
      SubnetId: !Ref PublicSubnetB 

  PublicSubnetC: # Public Subnet in AZ - 2
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [2, !GetAZs ]
      CidrBlock: !Select [2, !Cidr [ !GetAtt Vpc.CidrBlock, 4, 8]]
      MapPublicIpOnLaunch: true
      VpcId: !Ref Vpc
      Tags:
        - Key: "Name"
          Value: !Join ["-", [!Ref Prefix, "public-c-sub"]]
        - Key: "CostCenter"
          Value: !Ref CostCenter
        - Key: "Owner"
          Value: !Ref Owner

  PublicSubnetCRouteTableAssociation: 
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PublicSubnetsRouteTable
      SubnetId: !Ref PublicSubnetC 

  Cloud9:
    Type: AWS::Cloud9::EnvironmentEC2
    Properties: 
      AutomaticStopTimeMinutes: 60
      Description: Admin IDE
      InstanceType: t2.micro
      # Name: String
      # OwnerArn: String
      # Repositories: 
      #   - Repository
      SubnetId: !Ref PublicSubnetA
      Tags: 
        - Key: Owner
          Value: !Ref Owner


